Visualize:Property%20Sets matrix VisPropertySets= 0 1 // row titles are properties in the form "SRCD.Left", columns are property sets
System:Version matrix OperatorVersion= { Framework Revision Build Config Protocol } 1 3.6%20BETA.5738.1 5738.1,%202018-03-22T10:34:35Z MSVC-17.0.61030.0-AMD64,%20release,%202018-03-22T13:08:28Z,%20user@user-PC USE_DYNAMIC_CRT:OFF%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // operator module version information (noedit)(readonly)
System:Protocol int AutoConfig= 1 1 0 1 // Use AutoConfig protocol extension (boolean)
System:Protocol int OperatorBackLink= 1 1 0 1 // Send final state and signal information to Operator (boolean)
System:Core%20Connections string OperatorIP= 127.0.0.1 127.0.0.1 % % // the Operator module's IP (noedit)(readonly)
Source:Signal%20Properties:DataIOFilter list ChannelNames= 3 EMG1 EMG2 TRIG // list of channel names
Storage:Data%20Location:DataIOFilter string DataDirectory= ../../data ..\data % % // path to top level data directory (directory)
Storage:Session:DataIOFilter string SubjectName= TEST Name % % // subject alias
Storage:Session:DataIOFilter string SubjectSession= 001 001 % % // three-digit session number
Storage:Session:DataIOFilter string SubjectRun= 03 00 % % // two-digit run number
Storage:Documentation:DataIOFilter string ID_System= % // BCI2000 System Code
Storage:Documentation:DataIOFilter string ID_Amp= % // BCI2000 Amp Code
Storage:Documentation:DataIOFilter string ID_Montage= % // BCI2000 Cap Montage Code
Visualize:Timing:DataIOFilter int VisualizeTiming= 0 1 0 1 // visualize system timing (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSource= 1 1 0 1 // visualize raw brain signal (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceDecimation= 1 auto % % // decimation factor for raw brain signal
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceBufferSize= auto auto % % // number of blocks to aggregate before sending to operator
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceTime= 2s 2s 0 % // how much time in Source visualization
Visualize:Source%20Signal:DataIOFilter int SourceMin= -100mV // raw signal vis Min Value
Visualize:Source%20Signal:DataIOFilter int SourceMax= 100mV // raw signal vis Max Value
Source:NIADC float SamplingRate= 3200 256 1 200000 // The signal's sampling rate in Hz
Source:NIADC int SampleBlockSize= 128 16 2 2048 // The number of samples in one block
Source:NIADC int SourceCh= 3 8 1 16 // The number of channels
Source:NIADC int BoardNumber= 3 1 1 16 // The NI-ADC board's device number
Source:NIADC list SourceChGain= 3 162.070 162.070 162.070 
Source:NIADC list SourceChOffset= 3 0 0 0 
Storage:BCI2000FileWriter string FileFormat= dat // format of data file (readonly)
Storage:Documentation:BCI2000FileWriter string StorageTime= % // time of beginning of data storage
Source:Alignment:AlignmentFilter int AlignChannels= 1 0 0 1 // align channels in time (0=no, 1=yes)
Source:Alignment:AlignmentFilter floatlist SourceChTimeOffset= 0 0 % % // time offsets for all source channels (may be empty)
Source:Online%20Processing:TransmissionFilter list TransmitChList= 1 * // list of transmitted channels: Channel names may contain * and ? wildcards,  and character ranges enclosed in []; wildcard patterns may be negated by prepending an exclamation mark.  Ranges of channels may be specified using : or - to separate begin from end.
System:Protocol:EventLink int EventLink= 1 1 0 1 // Send events from Operator to Source module (boolean)
Storage:Data%20Location:RunManager string DataFile= $%7bSubjectName%7d/$%7bSubjectName%7d-$%7bSessionStamp%7d/$%7bSubjectName%7d-$%7bSessionStamp%7d-R$%7bSubjectRun%7d-$%7bApplicationMode%7d.$%7bFileFormat%7d // name of data file relative to DataDirectory
System string OperatorAddress= 127.0.0.1:4001 
System:Core%20Connections string SignalSourceIP= 127.0.0.1 // (readonly)(noedit)
System:Core%20Connections string SignalSourcePort= 51604 // (readonly)(noedit)
System:Version matrix SignalSourceVersion= { Framework Revision Build Config Protocol } 1 3.05 N/A,%20N/A MSVC-17.0.61030.0-x86,%20release,%202019-12-20Z,%20HR18163admin@HR18163 USE_DYNAMIC_CRT:TRUE%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // SignalSource version information (noedit)(readonly)
System:Configuration matrix SignalSourceFilterChain= 9 { Filter%20Name Position%20String } DataIOFilter 0 NIADC 1 NullFileWriter 1 BCI2000FileWriter 1 EDFFileWriter 1 GDFFileWriter 1 NIDAQFilter 1.01 AlignmentFilter 1.1 TransmissionFilter 1.2 // SignalSource filter chain (noedit)(readonly)
System:Configuration matrix Filters= 16 1 /1/DataIOFilter /1/NIADC /1/BCI2000FileWriter /1/NIDAQFilter /1/AlignmentFilter /1/TransmissionFilter /3/ConnectorInput /3/KeystrokeFilter /3/ConnectorOutput /2/IIRBandpass /2/BackgroundTriggerFilter /2/NIDAQFilterAO /2/DigitimerFilter /2/TrapFilter /2/RangeIntegrator /2/SharedMemoryOutputConnector // Filter Directory (noedit)(readonly)
Visualize:Processing%20Stages int VisualizeNIDAQFilter= 0 0 0 1 // Visualize NIDAQFilter output (boolean)
Visualize:Processing%20Stages int VisualizeAlignmentFilter= 0 0 0 1 // Visualize AlignmentFilter output (boolean)
Visualize:Processing%20Stages int VisualizeTransmissionFilter= 0 0 0 1 // Visualize TransmissionFilter output (boolean)
Connector:ConnectorInput list ConnectorInputFilter= 0 // list of state names or signal elements to allow, "*" for any, signal elements as in "Signal(1,0)"
Connector:ConnectorInput string ConnectorInputAddress= % localhost:20320 % % // IP address/port to read from, e.g. localhost:20320
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeStateName= % // State to be translated into keystrokes (0-F), empty for off
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeExpression= % // Expression that evaluates to a virtual keycode, empty for off
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeExpressionOnStartRun= % // Expression that initializes expression variables on StartRun
Connector:ConnectorOutput string ConnectorOutputAddress= % localhost:20321 % % // one or more IP:Port combinations, e.g. localhost:20321
System:Core%20Connections string ApplicationIP= 127.0.0.1 // (readonly)(noedit)
System:Core%20Connections string ApplicationPort= 51629 // (readonly)(noedit)
System:Version matrix ApplicationVersion= { Framework Revision Build Config Protocol } 1 3.6%20BETA.5738.1 5738.1,%202018-03-22T10:34:35Z MSVC-17.0.61030.0-AMD64,%20release,%202018-03-22T13:08:28Z,%20user@user-PC USE_DYNAMIC_CRT:OFF%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // Application version information (noedit)(readonly)
System:Configuration matrix ApplicationFilterChain= 3 { Filter%20Name Position%20String } ConnectorInput 2.9999 KeystrokeFilter 3.1 ConnectorOutput 3.9999 // Application filter chain (noedit)(readonly)
Storage:Session string SessionStamp= 2019-12-23-14-43 
Application:Operant%20Conditioning string ApplicationMode= ST 
Application:Operant%20Conditioning float BackgroundScaleLimit= 52.4mV 20mV 0 % 
Application:Operant%20Conditioning float ResponseScaleLimit= 5.8mV 20mV 0 % 
Application:Operant%20Conditioning float BaselineResponseLevel= %% 8mV 0 % 
Application:EPOCS float MwaveTarget= 30mV 30mV % % 
Application:EPOCS float MwavePercentage= 20 20 % % 
Application:EPOCS float TargetPercentile= 66 66 % % 
Filtering:IIR%20Bandpass:IIRBandpass float HighPassCorner= 0.5 0Hz % % // High pass corner frequency
Filtering:IIR%20Bandpass:IIRBandpass int HighPassOrder= 2.0 2 0 % // High pass order
Filtering:IIR%20Bandpass:IIRBandpass float LowPassCorner= 500.0 0Hz % % // Low pass corner frequency
Filtering:IIR%20Bandpass:IIRBandpass int LowPassOrder= 0.0 4 0 % // Low pass order
Filtering:IIR%20Bandpass:IIRBandpass float NotchCenter= 60.0 60Hz % % // Notch center frequency
Filtering:IIR%20Bandpass:IIRBandpass int NotchOrder= 0.0 4 0 % // Notch order
Filtering:IIR%20Bandpass:IIRBandpass float FilterGain= 1.0 1.0 0 % // Overall filter gain
Filtering:IIR%20Bandpass:IIRBandpass int Downsample= 0 1 0 1 // Downsample to >= 4*LowPassCorner (boolean)
Filtering:IIR%20Bandpass:IIRBandpass int Rectification= 0 0 0 2 // Rectify output: 0 No Rectification, 1 Half-Wave, 2 Full-Wave (enumeration)
Background:Triggering%20Conditions:BackgroundTriggerFilter matrix BackgroundChannels= 2 { Input%20Channel Subtract%20Mean? Norm Min%20Amplitude Max%20Amplitude Feedback%20Weight } EMG1 yes 1 0mV 26.2mV 1 EMG2 yes 1 0mV 15mV 0 // specification of signal channels used to monitor baseline compliance
Background:Triggering%20Conditions:BackgroundTriggerFilter float BackgroundHoldDuration= 2s 2s 0 % // the duration for which consecutive time segments must comply with the target baseline activity ranges
Background:Triggering%20Conditions:BackgroundTriggerFilter float MaxRandomExtraHoldDuration= 0s 1s 0 % // a random extra duration may be added to BackgroundHoldDuration on each trial, up to this amount
Background:Triggering%20Conditions:BackgroundTriggerFilter float BackgroundSegmentDuration= 200ms 200ms 1 % // the duration of one background segment in sampleblocks (or in milliseconds if "ms" is appended)
Background:Background%20Feedback:BackgroundTriggerFilter float FeedbackTimeConstant= 200ms 200ms 0 % // length of time over which to average the feedback signal (will be rounded up to a whole number of segment lengths)
Background:Background%20Feedback:BackgroundTriggerFilter float BackgroundFreezeTime= 1000ms 1000ms 0 % // after a trigger is triggered, the background bar's height and color will be frozen for this duration (expressed in sampleblocks, or milliseconds if "ms" is appended)
Trigger:Triggering%20Conditions:BackgroundTriggerFilter string TriggerExpression= % // optional BCI2000 Expression that must be satisfied for trigger to fire
Trigger:Trigger%20Output:BackgroundTriggerFilter float TriggerStateDuration= 2 2 1 % // duration (whole number of sampleblocks) for which the EnableTrigger output state is kept high
Trigger:Triggering%20Conditions:BackgroundTriggerFilter float MinTimeBetweenTriggers= 5s 5s 2 % // trigger refractory time in sampleblocks (or in seconds if "s" is appended)
Trigger:Triggering%20Conditions:BackgroundTriggerFilter float MaxRandomTimeBetweenTriggers= 0s 0s 0s 2s // max extra trigger refractory time in sampleblocks (or in seconds if "s" is appended)
Visualize:Processing%20Stages:BackgroundTriggerFilter int VisualizeBackgroundAverages= 0 0 0 1 // Visualize segment averages from BackgroundTriggerFilter (boolean)
Visualize:Processing%20Stages:BackgroundTriggerFilter float BackgroundVisualizationUnit= 1mV 1mV 0 % // Unit for numerical representation of BackgroundTriggerFilter
Filtering:NIDAQFilterAO:NIDAQFilterAO int DigitalOuput= 1 1 0 1 // Enable Digital Output? (boolean)
Filtering:NIDAQFilterAO:NIDAQFilterAO int AnalogOutput= 0 1 0 1 // Enable Analog Output? (boolean)
Filtering:NIDAQFilterAO:NIDAQFilterAO matrix FilterExpressions= 1 { Output%20Type Device%20Name Port/Line Expression/Current } Digital Dev3 port0/line7 EnableTrigger // specification for Analog and Digital Output
Stimulation:NIDAQFilterAO:NIDAQFilterAO int Biphasic= 1 1 1 2 // Options are 1=Yes 2=No(enumeration)
Stimulation:NIDAQFilterAO:NIDAQFilterAO int StimulationType= 2 1 1 6 // Options are 1=square 2=sine 3=linear_rising 4=linear_down 5=exp_rising 6=exp_down(enumeration)
Stimulation:NIDAQFilterAO:NIDAQFilterAO float PulseWidth= 0.5ms 0.5ms % % // PulseWidth of the Analog Stimulii in "ms"
Stimulation:NIDAQFilterAO:NIDAQFilterAO float InterphasicDelay= 0.1ms 0.1ms % % // Interphasic Delay of the Analog Stimulii in "ms"
Stimulation:NIDAQFilterAO:NIDAQFilterAO float InitialCurrent= 0 1 % % // Initial Current to Use for Stimulation "mA"
Stimulation:NIDAQFilterAO:NIDAQFilterAO int AORange= 5 5 2 10 // Output range for Analog Output in Volts (default 5V)
Stimulation:DigitimerFilter:DigitimerFilter int EnableD188ControlFilter= 0 0 0 1 // enable DigitimerFilter? (boolean)
Stimulation:DigitimerFilter:DigitimerFilter int EnableDS5ControlFilter= 0 0 0 1 // enable DS5ControlFilter? (boolean)
Stimulation:DigitimerFilter:DigitimerFilter int EnableDS8ControlFilter= 1 0 0 1 // enable DS8ControlFilter? (boolean)
Stimulation:DigitimerFilter:DigitimerFilter int D188Channel= 1 0 0 8 // Initial channel to use if D188 Enabled
Trigger:Trigger%20Detection:TrapFilter string TriggerChannel= TRIG 3 % % // name or index of the input channel used to monitor the trigger
Trigger:Trigger%20Detection:TrapFilter float TriggerThreshold= 1.0V 1.0V 0 % // voltage that the trigger must exceed to be counted as a rising edge
Trigger:Trigger%20Detection:TrapFilter int TriggerSource= 1 1 1 2 // Options are 1=TriggerChannel 2=DigitalInput1(gUSBamplifier) (enumeration)
Trigger:Trigger%20Detection:TrapFilter string TriggerState= DigitalInput1 // if gUSB being used, the digital channel state to use
Trigger:Epoch:TrapFilter stringlist ChannelsToTrap= 2 EMG1 EMG2 2 % % // names or indices of the input channels to be trapped
Trigger:Epoch:TrapFilter float LookForward= 500ms 150ms 1 % // length of signal segment to capture after each trigger
Trigger:Epoch:TrapFilter float LookBack= 100ms 75ms 1 % // length of signal segment to capture before each trigger
Visualize:Processing%20Stages:TrapFilter int VisualizeTrapFilter= 0 1 0 1 // Visualize TrapFilter output (boolean)
Responses:Response%20Magnitudes:RangeIntegrator matrix ResponseDefinition= 4 { Input%20Channel Start End Subtract%20Mean? Norm Weight Response%20Name } EMG1 18.6ms 25.3ms no 1 1.0 EMG1 EMG2 18.6ms 25.3ms no 1 1.0 EMG2 EMG1 6.1ms 11.6ms no 1 1.0 EMG1a EMG2 6.1ms 11.6ms no 1 1.0 EMG2a // define the response signals:
Responses:Response%20Magnitudes:RangeIntegrator matrix ResponseAssessment= 2 { Response%20Name Min%20Amplitude Max%20Amplitude Feedback%20Weight } EMG1 0mV 2.9mV 1 EMG2 0mV % 0 // process the response signals:
Responses:Response%20Magnitudes:RangeIntegrator matrix ReferenceAssessment= 2 { Response%20Name Feedback%20Weight } EMG1a 1 EMG2a 0 // process the reference signals:
Responses:Response%20Magnitudes:RangeIntegrator int OutputMode= 0 0 0 1 // which signal to pass on, 0: pass through input unchanged, 1: output responses (enumeration)
Responses:Response%20Magnitudes:RangeIntegrator int AnalysisType= 0 0 0 1 // analyse the signal using, 0: Mean Rectified, 1: Peak-to-Peak (enumeration)
Connector:Shared%20Memory%20Output%20Connector:SharedMemoryOutputConnector list OutputExpressions= 2 BackgroundFeedbackValue ResponseFeedbackValue // Leave blank to pass through the signal as normal. Or enter an expression: then the TCP output of this filter will be reduced to just this scalar value.
Connector:Shared%20Memory%20Output%20Connector:SharedMemoryOutputConnector string SharedMemoryOutput= file://epocs.mmap // URL to receive this filter's output  
System int NumberOfThreads= 0 0 % % // Maximum number of threads for parallel execution, 0 for number of available processors
System:Core%20Connections string SignalProcessingIP= 127.0.0.1 // (readonly)(noedit)
System:Core%20Connections string SignalProcessingPort= 51647 // (readonly)(noedit)
System:Version matrix SignalProcessingVersion= { Framework Revision Build Config Protocol } 1 3.05 N/A,%20N/A MSVC-17.0.61030.0-x86,%20release,%202018-11-21T16:23:51Z,%20HR18163admin@HR18163 USE_DYNAMIC_CRT:OFF%20USE_OPENMP:ON%20USE_PRECOMPILED_HEADERS:ON%20USE_ASSERTS_IN_RELEASE_BUILDS:OFF 2.3 // SignalProcessing version information (noedit)(readonly)
System:Configuration matrix SignalProcessingFilterChain= 7 { Filter%20Name Position%20String } IIRBandpass 2.A BackgroundTriggerFilter 2.B NIDAQFilterAO 2.C DigitimerFilter 2.D TrapFilter 2.E RangeIntegrator 2.F SharedMemoryOutputConnector 2.G // SignalProcessing filter chain (noedit)(readonly)
Visualize:Processing%20Stages int VisualizeIIRBandpass= 0 0 0 1 // Visualize IIRBandpass output (boolean)
Visualize:Processing%20Stages int VisualizeNIDAQFilterAO= 0 0 0 1 // Visualize NIDAQFilterAO output (boolean)
Visualize:Processing%20Stages int VisualizeDigitimerFilter= 0 0 0 1 // Visualize DigitimerFilter output (boolean)
Visualize:Processing%20Stages int VisualizeRangeIntegrator= 0 0 0 1 // Visualize RangeIntegrator output (boolean)
System:Randomization int RandomSeed= 2614 0 % % // seed for the BCI2000 pseudo random number generator (readonly)
System:Randomization int RandomizationWarning= 1 1 0 1 // warn if subsequent Runs have identical RandomSeed value (boolean)
System:State%20Vector int StateVectorLength= 24 16 % % // length of the state vector in bytes (noedit)(readonly)
