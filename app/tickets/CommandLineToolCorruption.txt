TLDR (interim conclusion 2014-04-15): to compile working versions of BCI2000's command-line filter tools, you
must roll back to r4528 (August 2013): r4529 does not seem to compile at all and r4530 introduced a bug which
corrupts command-line tool output, causing the next tool in the pipeline to crash.

I speculate that this same bug *might* also be affecting online BCI2000 operation, possibly explaining the
rare sporadic crashes in the StateMachine thread.

Some filters (e.g. BackgroundTriggerFilter and RangeIntegrator), use a few small utilities
and conveniences that were only introduced into the BCI2000 framework in later versions (e.g.
StringUtils::ToLower, Inf<double>) so they no longer compile in the rolled-back framework.  I introduced
a header called Workaround4530.h which adds these back in. This is obviously not a sustainable way forward
but for me to hack through the framework jungle actually fix this bug would likely take weeks of effort.

Workaround4530.h might also allow the tools to be compiled on the Mac (rolling back to whatever framework
version last compiled there).



Notes

On 64-bit Windows 7 and 8 using 32-bit Release builds of command-line tools from BCI2000 source r4700:
(update: same results when the binaries are transferred to and run on a 32-bit Windows 7 platform)

> cd c:\BCI2000
> tools\cmdline\bci_dat2stream.exe -ptools\matlab\ExampleParameters.prm --duration=0:10 < data\samplefiles\eeg3_2.dat >   dat2stream-eeg3_2-bin32win64.bin
> tools\cmdline\TransmissionFilter.exe < dat2stream-eeg3_2-bin32win64.bin > out

Logic Error: Error reading message of type 0x321 (unknown), nominal length: 31045, read: 0
Function: bci::MessageChannel::HandleMessage()
File: ..\..\..\..\src\shared\modules\MessageChannel.cpp
Line: 165
Aborting TransmissionFilter.

NB: It is possible to show that it is the *output* mechanism of bci_dat2stream, TransmissionFilter and
friends, and probably not their input, that is corrupted. Using a version of the tools that is known to work
(i.e. my 64-bit native OSX binaries from whichever svn release of BCI2000 was last able to compile on the Mac - possibly circa early 2013?
I created dat2stream-eeg3_2-bin64osx64.bin and transferred this over to the Windows machine.  The Windows TransmissionFilter.exe
successfully processed this, but the problem was only pushed one step down the chain: subsequent filters in the chain
(e.g. SpatialFilter.exe) produce exactly the same error (Logic Error, MessageChannel.cpp line 165 while reading "unknown"
type message) when they attempt to process the output of TransmissionFilter.exe

The error still occurs when bci_dat2stream.exe is run without command-line options (but --duration=0:10 helps to make the
binary files more manageable in size)

Systematic differences in dat2stream-eeg3_2-bin64osx64.bin ("good") and dat2stream-eeg3_2-bin32win64.bin ("bad"):

- at the start of the stream, before each state definition, the good file seems to write two 16-bit integers
  (e.g. %03%00!%00 ) whereas the bad file seems to write the same integers as 8-bit ( %03! )
- at the end of each state definition there is \r\n in the good file, but \r.\n in the bad one.
- in the data section of the stream, there is an occasional missing %00 byte in the bad file, implying that
  16-bit integers are being written as 8-bit occasionally.
- there are also regular omissions of strings of 31 %00 bytes at the beginning of the data section in the bad file,
  and to begin with this looks systematic enough to be a possible deliberate change of protocol, but later on the
  missing strings shrink in length...

Update 2014-05-14:

Here is a journal of my binary svn-log-guided search through revisions to determine when the following command does and
does not fail:
tools\cmdline\bci_dat2stream %* < data\samplefiles\eeg3_2.dat | tools\cmdline\TransmissionFilter | tools\cmdline\bci_stream2mat > nul

r4650 fails
	same error as above, but from MessageHandler.cpp line 117 instead of MessageChannel.cpp line 165

r4537 fails but with different phenomenon:
	with no flags:
		Runtime Error: Unhandled Win32 exception 0xc0000005: ACCESS_VIOLATION
		Aborting TransmissionFilter.
		Error writing to standard output
	with "--duration=00:10":
		never returns (mat file size 0)

r4523 seems to work (no crashes)
r4524 also seems to work despite the suspicious-sounding commit message
r4531 fails
r4530 fails - failure was *probably* introduced here because BCIStream*.cpp seem to have been modified to introduce compression in this commit
r4529 fails to compile - so failure *could* have been been introduced here - hard to tell because this commit changed very many framework files
r4528 seems to succeed

looking at r4530:
	CompressMessages returns:

	BCIStream_guiapp.cpp: false
	BCIStream_mex.cpp:    false
	BCIStream_module.cpp: true
	BCIStream_opdll.cpp:  false
	BCIStream_tool.cpp:   false : this would seem to suggest that any new-fangled developments are *not* intended to be used in filtertools.
	However, the "bad" binary stream *does* appear compressed in some senses...
	Maybe some compression code is unintentionally called even when CompressMessages() returns false?
	Since it seems, from the above list, that this might happen in the operator dll too, maybe this also explains the rare StateMachine
	crashes during online sessions?
	Maybe only compression-enabled BCIStreams were ever thoroughly tested since, being used in online modules, they are the most important?
	When CompressMessages() returns false, the code uses a scarcely-modified version of the class previously called MessageDispatcher
	(now called Dispatcher). So maybe the assumption could have been made that since little had changed, this old class "must" work...

	Checking out r4530 and hacking BCIStream_tool.cpp so that CompressMessages() returns true - no change. Still fails.
	So much for shortcuts.
