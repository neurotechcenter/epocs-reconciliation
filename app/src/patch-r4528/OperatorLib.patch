Index: src/core/Operator/OperatorLib/CommandInterpreter.cpp
===================================================================
--- src/core/Operator/OperatorLib/CommandInterpreter.cpp	(revision 4528)
+++ src/core/Operator/OperatorLib/CommandInterpreter.cpp	(working copy)
@@ -97,7 +97,7 @@
   static const struct { const char* name, *format; }
   timevars[] =
   {
-    { "YYYYMMDD", "%Y%d%m" },
+    { "YYYYMMDD", "%Y%m%d" },
     { "HHMMSS", "%H%M%S" },
   };
   time_t t = ::time( NULL );
Index: src/core/Operator/OperatorLib/StateMachine.cpp
===================================================================
--- src/core/Operator/OperatorLib/StateMachine.cpp	(revision 4528)
+++ src/core/Operator/OperatorLib/StateMachine.cpp	(working copy)
@@ -129,6 +129,22 @@
   argstream >> ip;
   string modules;
   getline( argstream, modules, '\0' );
+
+  size_t start = 0;
+  while( start < modules.length() && isspace( modules[ start ] ) ) start++;
+  modules = modules.substr( start );
+  string token = "--SystemLogFile=";
+  string sysLogFilePath;
+  if( modules.substr( 0, token.length() ) == token )
+  {
+    modules = modules.substr( token.length() );
+    size_t stop = 0;
+    while( stop < modules.length() && !isspace( modules[ stop ] ) ) stop++;
+    sysLogFilePath = modules.substr( 0, stop );
+    while( stop < modules.length() && isspace( modules[ stop ] ) ) stop++;
+    modules = modules.substr( stop );
+  }
+
   if( modules.empty() )
     modules = "Source:4000 SignalProcessing:4001 Application:4002";
   istringstream iss( modules );
@@ -149,6 +165,19 @@
       mEventLink.Open( ::atoi( port.c_str() ) );
     }
   }
+  if( sysLogFilePath.length() )
+  {
+    string parentDir = FileUtils::ExtractDirectory( sysLogFilePath );
+    FileUtils::MakeDirectory( parentDir, true );
+    mSystemLog.close();
+    mSystemLog.clear();
+    mSystemLog.open( sysLogFilePath.c_str(), ios_base::out | ios_base::app );
+    if( !mSystemLog.is_open() )
+      bciwarn << "Cannot write system log: " << sysLogFilePath;
+  }
+  else
+    mSystemLog.close();
+
   mSystemState = Idle;
   if( bcierr__.Empty() && IsConsistentState( WaitingForConnection ) )
     EnterState( WaitingForConnection );
@@ -728,7 +757,11 @@
   }
   ExecuteCallback( inCallbackID, inMessage.c_str() );
   time_t t = ::time( NULL );
-  mDebugLog << ::ctime( &t ) << separator << inMessage << endl;
+  const size_t BUFFER_SIZE = 100;
+  char buf[ BUFFER_SIZE ];
+  ::strftime( buf, BUFFER_SIZE, "%Y-%m-%d %H:%M:%S", localtime( &t ) );
+  mDebugLog << buf << separator << inMessage << endl;
+  mSystemLog << buf << separator << inMessage << endl;
   ::Lock<Listeners> lock( mListeners );
   for( Listeners::iterator i = mListeners.begin(); i != mListeners.end(); ++i )
     ( *i )->HandleLogMessage( inCallbackID, inMessage );
Index: src/core/Operator/OperatorLib/StateMachine.h
===================================================================
--- src/core/Operator/OperatorLib/StateMachine.h	(revision 4528)
+++ src/core/Operator/OperatorLib/StateMachine.h	(working copy)
@@ -232,6 +232,7 @@
   std::string       mLocalAddress;
 
   std::ofstream     mDebugLog;
+  std::ofstream     mSystemLog;
 
   struct Listeners : std::set<CommandInterpreter*>, Lockable {} mListeners;
   ScriptEvents      mScriptEvents;
