////////////////////////////////////////////////////////////////////////////////
// Authors:
// Description: DS5ControlFilter implementation
////////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "stdlib.h"
#include <iostream>
#include "DS5ControlFilter.h"
#include "BCIStream.h"

using namespace std;

RegisterFilter( DS5ControlFilter, 2.D );

DS5ControlFilter::DS5ControlFilter()
{
}

DS5ControlFilter::~DS5ControlFilter()
{
  Halt();

}

void
DS5ControlFilter::Publish()
{
  // Define any parameters that the filter needs....

 BEGIN_PARAMETER_DEFINITIONS

   "Filtering:DS5ControlFilter int EnableDS5ControlFilter= 1 0 0 1 // enable DS5ControlFilter? (boolean)",   

 END_PARAMETER_DEFINITIONS

}

void
DS5ControlFilter::Preflight( const SignalProperties& Input, SignalProperties& Output ) const
{
 
  Output = Input; // this simply passes information through about SampleBlock dimensions, etc...
  DS5LibWrapper DS5;
  int i = Parameter("EnableDS5ControlFilter");
}


void
DS5ControlFilter::Initialize( const SignalProperties& Input, const SignalProperties& Output )
{
  
  enableDS5 = Parameter("EnableDS5ControlFilter");

  if (enableDS5)
  {

	  bool i = mDS5.CheckDS5connected();
	  _sleep(1000);
	  if(!i)
	  {
		  _sleep(500);//there is a bug where it doesn't always find it...
		  i = mDS5.CheckDS5connected();
		  if (!i) {bcierr << "DS5 not connected, check that the cable is connected and the DS5 control software is installed" << endl;}
	  }

	  if (i)
	  {
		  mDS5.Set5mA5V();
		  mDS5.AutoZero();
		  mDS5.ToggleOutput(false);
		  _sleep(500);
	  }
	  
  }
}

void
DS5ControlFilter::StartRun()
{
	if (enableDS5)
	{
		mDS5.AutoZero();
		_sleep(250);
		//There is also a bug when sometimes it doesn't toggle true...
		mDS5.ToggleOutput(true);
		
	}
}


void
DS5ControlFilter::Process( const GenericSignal& Input, GenericSignal& Output )
{

    Output = Input; // Pass the signal through unmodified.
}

void
DS5ControlFilter::StopRun()
{
	if (enableDS5)
	{
		mDS5.ToggleOutput(false);
	}
}

void
DS5ControlFilter::Halt()
{

}

